{"version":3,"sources":["reducers/todos.js","actions/index.js","reducers/visibilityFilter.js","reducers/index.js","components-redux/AddTodo.jsx","components-redux/FilterLink.jsx","selectors/getVisibleTodos.redux.js","components-redux/Todo.jsx","components-redux/VisibleTodoList.jsx","App.redux.jsx","components-recoil-readonly/FilterLink.jsx","components-recoil-readonly/VisibleTodoList.jsx","App.recoil-readonly.jsx","components-recoil-readwrite/AddTodo.jsx","components-recoil-readwrite/FilterLink.jsx","selectors/getVisibleTodos.recoil.js","components-recoil-readwrite/VisibleTodoList.jsx","App.recoil-readwrite.jsx","index.js"],"names":["todos","state","action","type","id","text","completed","map","todo","nextTodoId","getNextTodoId","setVisibilityFilter","filter","toggleTodo","VisibilityFilters","visibilityFilter","combineReducers","AddTodo","dispatch","useDispatch","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trimmedValue","trim","value","onChange","target","connect","ownProps","active","onClick","props","children","disabled","style","marginLeft","getVisibleTodos","createSelector","allTodos","t","Error","Todo","textDecoration","VisibleTodoList","useSelector","key","ReduxApp","visibilityFilterAtom","atomFromRedux","FilterLink","currentFilter","useRecoilValue","todosSelector","selectorFromReselect","RecoilReadOnlyApp","todosAtom","useRecoilState","setTodos","setCurrentFilter","allTodosAtom","selector","get","setAllTodos","RecoilReadWriteApp","rootReducerWithRecoilSync","syncChangesFromRecoil","rootReducer","composeEnhancers","composeWithDevTools","store","createStore","render","StrictMode","batchWrites","href","rel","document","getElementById"],"mappings":"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","file":"static/js/main.c428aeee.chunk.js","sourcesContent":["const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false,\n        },\n      ];\n    case 'TOGGLE_TODO':\n      return state.map((todo) =>\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo,\n      );\n    default:\n      return state;\n  }\n};\n\nexport default todos;\n","let nextTodoId = 0;\n\n// So that the redux and the recoil-readwrite apps don't hit ID collisions with each other, they both need to read and\n// update nextTodoId\nexport const getNextTodoId = () => nextTodoId++;\n\nexport const addTodo = (text) => ({\n  type: 'ADD_TODO',\n  id: getNextTodoId(),\n  text,\n});\n\nexport const setVisibilityFilter = (filter) => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter,\n});\n\nexport const toggleTodo = (id) => ({\n  type: 'TOGGLE_TODO',\n  id,\n});\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\n};\n","import { VisibilityFilters } from '../actions';\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter;\n    default:\n      return state;\n  }\n};\n\nexport default visibilityFilter;\n","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nexport default combineReducers({\n  todos,\n  visibilityFilter,\n});\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addTodo } from '../actions';\n\nconst AddTodo = () => {\n  const dispatch = useDispatch();\n\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <div>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          const trimmedValue = inputValue.trim();\n          if (trimmedValue) {\n            dispatch(addTodo(trimmedValue));\n            setInputValue('');\n          }\n        }}\n      >\n        <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddTodo;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { setVisibilityFilter } from '../actions';\n\nconst FilterLink = (props) => {\n  const { children, active, onClick } = props;\n\n  return (\n    <button\n      onClick={onClick}\n      disabled={active}\n      style={{\n        marginLeft: '4px',\n      }}\n    >\n      {children}\n    </button>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter,\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterLink);\n","import { createSelector } from 'reselect';\n\nimport { VisibilityFilters } from '../actions';\n\nconst allTodosSelector = (state) => state.todos;\nconst visibilityFilterSelector = (state) => state.visibilityFilter;\n\nconst getVisibleTodos = createSelector(\n  [allTodosSelector, visibilityFilterSelector],\n  (allTodos, visibilityFilter) => {\n    switch (visibilityFilter) {\n      case VisibilityFilters.SHOW_ALL:\n        return allTodos;\n      case VisibilityFilters.SHOW_COMPLETED:\n        return allTodos.filter((t) => t.completed);\n      case VisibilityFilters.SHOW_ACTIVE:\n        return allTodos.filter((t) => !t.completed);\n      default:\n        throw new Error('Unknown filter: ' + visibilityFilter);\n    }\n  },\n);\n\nexport default getVisibleTodos;\n","import React from 'react';\n\nconst Todo = ({ onClick, completed, text }) => (\n  <li\n    onClick={onClick}\n    style={{\n      textDecoration: completed ? 'line-through' : 'none',\n    }}\n  >\n    {text}\n  </li>\n);\n\nexport default Todo;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { toggleTodo } from '../actions';\nimport getVisibleTodos from '../selectors/getVisibleTodos.redux';\nimport Todo from './Todo';\n\nconst VisibleTodoList = (props) => {\n  const dispatch = useDispatch();\n\n  const todos = useSelector(getVisibleTodos);\n\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <Todo key={todo.id} {...todo} onClick={() => dispatch(toggleTodo(todo.id))} />\n      ))}\n    </ul>\n  );\n};\n\nexport default VisibleTodoList;\n","import React from 'react';\n\nimport { VisibilityFilters } from './actions';\nimport AddTodo from './components-redux/AddTodo';\nimport FilterLink from './components-redux/FilterLink';\nimport VisibleTodoList from './components-redux/VisibleTodoList';\n\nconst ReduxApp = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n\n    <div>\n      <span>Show: </span>\n      <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n    </div>\n  </div>\n);\n\nexport default ReduxApp;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useRecoilValue } from 'recoil';\nimport { atomFromRedux } from 'redux-to-recoil';\n\nimport { setVisibilityFilter } from '../actions';\n\nconst visibilityFilterAtom = atomFromRedux('.visibilityFilter');\n\nconst FilterLink = (props) => {\n  const { children, filter } = props;\n  const dispatch = useDispatch();\n\n  const currentFilter = useRecoilValue(visibilityFilterAtom);\n\n  return (\n    <button\n      onClick={() => dispatch(setVisibilityFilter(filter))}\n      disabled={filter === currentFilter}\n      style={{\n        marginLeft: '4px',\n      }}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default FilterLink;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useRecoilValue } from 'recoil';\nimport { selectorFromReselect } from 'redux-to-recoil';\n\nimport { toggleTodo } from '../actions';\nimport getVisibleTodos from '../selectors/getVisibleTodos.redux';\nimport Todo from './Todo';\n\nconst todosSelector = selectorFromReselect(getVisibleTodos);\n\nconst VisibleTodoList = (props) => {\n  const dispatch = useDispatch();\n\n  const todos = useRecoilValue(todosSelector);\n\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <Todo key={todo.id} {...todo} onClick={() => dispatch(toggleTodo(todo.id))} />\n      ))}\n    </ul>\n  );\n};\n\nexport default VisibleTodoList;\n","import React from 'react';\n\nimport { VisibilityFilters } from './actions';\nimport AddTodo from './components-recoil-readonly/AddTodo';\nimport FilterLink from './components-recoil-readonly/FilterLink';\nimport VisibleTodoList from './components-recoil-readonly/VisibleTodoList';\n\nconst RecoilReadOnlyApp = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n\n    <div>\n      <span>Show: </span>\n      <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n    </div>\n  </div>\n);\n\nexport default RecoilReadOnlyApp;\n","import React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { atomFromRedux } from 'redux-to-recoil';\n\nimport { getNextTodoId } from '../actions';\n\nconst todosAtom = atomFromRedux('.todos');\n\nconst AddTodo = () => {\n  const [, setTodos] = useRecoilState(todosAtom);\n\n  const addTodo = (text) => {\n    setTodos((todos) => [\n      ...todos,\n      {\n        id: getNextTodoId(),\n        text,\n        completed: false,\n      },\n    ]);\n  };\n\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <div>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          const trimmedValue = inputValue.trim();\n          if (trimmedValue) {\n            addTodo(trimmedValue);\n            setInputValue('');\n          }\n        }}\n      >\n        <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddTodo;\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { atomFromRedux } from 'redux-to-recoil';\n\nconst visibilityFilterAtom = atomFromRedux('.visibilityFilter');\n\nconst FilterLink = (props) => {\n  const { children, filter } = props;\n\n  const [currentFilter, setCurrentFilter] = useRecoilState(visibilityFilterAtom);\n\n  return (\n    <button\n      onClick={() => setCurrentFilter(filter)}\n      disabled={filter === currentFilter}\n      style={{\n        marginLeft: '4px',\n      }}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default FilterLink;\n","import { selector } from 'recoil';\nimport { atomFromRedux } from 'redux-to-recoil';\n\nimport { VisibilityFilters } from '../actions';\n\nconst allTodosAtom = atomFromRedux('.todos');\nconst visibilityFilterAtom = atomFromRedux('.visibilityFilter');\n\nconst getVisibleTodos = selector({\n  key: 'getVisibleTodos',\n  get: ({ get }) => {\n    const allTodos = get(allTodosAtom);\n    const visibilityFilter = get(visibilityFilterAtom);\n\n    switch (visibilityFilter) {\n      case VisibilityFilters.SHOW_ALL:\n        return allTodos;\n      case VisibilityFilters.SHOW_COMPLETED:\n        return allTodos.filter((t) => t.completed);\n      case VisibilityFilters.SHOW_ACTIVE:\n        return allTodos.filter((t) => !t.completed);\n      default:\n        throw new Error('Unknown filter: ' + visibilityFilter);\n    }\n  },\n});\n\nexport default getVisibleTodos;\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { atomFromRedux } from 'redux-to-recoil';\n\nimport getVisibleTodos from '../selectors/getVisibleTodos.recoil';\nimport Todo from './Todo';\n\nconst todosAtom = atomFromRedux('.todos');\n\nconst VisibleTodoList = () => {\n  const [todos] = useRecoilState(getVisibleTodos);\n  const [, setAllTodos] = useRecoilState(todosAtom);\n\n  const toggleTodo = (id) => {\n    setAllTodos((allTodos) =>\n      allTodos.map((todo) => (todo.id === id ? { ...todo, completed: !todo.completed } : todo)),\n    );\n  };\n\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} />\n      ))}\n    </ul>\n  );\n};\n\nexport default VisibleTodoList;\n","import React from 'react';\n\nimport { VisibilityFilters } from './actions';\nimport AddTodo from './components-recoil-readwrite/AddTodo';\nimport FilterLink from './components-recoil-readwrite/FilterLink';\nimport VisibleTodoList from './components-recoil-readwrite/VisibleTodoList';\n\nconst RecoilReadWriteApp = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n\n    <div>\n      <span>Show: </span>\n      <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n    </div>\n  </div>\n);\n\nexport default RecoilReadWriteApp;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RecoilRoot } from 'recoil';\nimport { SyncReduxToRecoil, syncChangesFromRecoil } from 'redux-to-recoil';\n\nimport rootReducer from './reducers';\nimport ReduxApp from './App.redux';\nimport RecoilReadOnlyApp from './App.recoil-readonly';\nimport RecoilReadWriteApp from './App.recoil-readwrite';\n\nconst rootReducerWithRecoilSync = syncChangesFromRecoil(rootReducer);\n\nconst composeEnhancers = composeWithDevTools();\nconst store = createStore(rootReducerWithRecoilSync, composeEnhancers);\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <RecoilRoot>\n        <SyncReduxToRecoil batchWrites />\n        <h2>Redux-to-Recoil: Todo List Demo</h2>\n        <p>\n          Use the{' '}\n          <a\n            href=\"https://github.com/zalmoxisus/redux-devtools-extension#installation\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux Devtools extension\n          </a>{' '}\n          to watch the Redux state.\n        </p>\n        <p>\n          <a\n            href=\"https://github.com/spautz/redux-to-recoil/tree/master/demos/todo-list\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View source and readme\n          </a>\n        </p>\n\n        <h3>Plain Redux</h3>\n        <ReduxApp />\n\n        <h3>Redux-to-Recoil: Read-only</h3>\n        <RecoilReadOnlyApp />\n\n        <h3>Redux-to-Recoil: Read-write</h3>\n        <RecoilReadWriteApp />\n      </RecoilRoot>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}